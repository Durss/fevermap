package com.muxxu.fever.fevermap.commands {	import com.nurun.core.commands.AbstractCommand;	import com.nurun.core.commands.events.CommandEvent;	import flash.display.Loader;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.system.ApplicationDomain;	import flash.system.LoaderContext;	import flash.utils.ByteArray;	/**	 * XOR key : QpU13q745DnlwuQ1dT599LF64W0b74wN1wC326Mb77G562C4zqy1pKsVJAEN2DjJuk0UCo7Fwrqt91lNl0K9YIWQ8uMElm71	 * 	 * @author Francois	 */	public class InitLibCmd extends AbstractCommand {			[Embed(source="../../../../../../../assets/crypto.swf", mimeType="application/octet-stream")]		private var _binaryClass:Class;		private var _binaryData:ByteArray;		private var _loader:Loader;		[Embed(source="../../../../../../../assets/crypto.key", mimeType="application/octet-stream")]		private var _gen:Class;				/*         ******* HOW TO ENCRYPT THE KEY**********				var key:String = "QpU13q745DnlwuQ1dT599LF64W0b74wN1wC326Mb77G562C4zqy1pKsVJAEN2DjJuk0UCo7Fwrqt91lNl0K9YIWQ8uMElm71";		var ba:ByteArray = new ByteArray();		ba.writeUTF(key);		var fs:FileStream = new FileStream();		fs.open(new File("file:///D:/Programmation/FLash/muxxu/fevermap/assets/crypto.key"), FileMode.WRITE);		fs.writeBytes(ba);		fs.close();				xorref	= ba.readUTF();		trace('xorref: ' + (xorref)); //UNCRYPTED KEY		*/						
		/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>InitLibCmd</code>.		 */		public function InitLibCmd() {			_binaryData = new _binaryClass() as ByteArray;						// Decrypts the key			var i:int, len:int, kLen:int, kIndex:int, xorref:String;			var ba:ByteArray = new _gen();			ba.position = 0;			xorref	= ba.readUTF();
			len		= _binaryData.length;			kLen	= xorref.length;						if(kLen == 0) {				dispatchEvent(new CommandEvent(CommandEvent.ERROR, "Lib initialisation failed."));				return;			}						//decrypts the crypted SWF from the key.			for(i = 0; i < len; ++i) {				_binaryData[i] = _binaryData[i] ^ xorref.charCodeAt(kIndex);				if(++ kIndex >= kLen) kIndex=0;			}			_loader = new Loader();			_loader.contentLoaderInfo.addEventListener(Event.COMPLETE, loadCompleteHandler);			_loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, loadingErrorHandler);		}
						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/* ****** *		 * PUBLIC *		 * ****** */		/**		 * @inheritDoc		 */		override public function execute():void {			var lc:LoaderContext = new LoaderContext(false, ApplicationDomain.currentDomain);			lc.allowCodeImport = true;						try {				_loader.loadBytes(_binaryData, lc);			}catch(error:Error) {				new URLLoader().load(new URLRequest("http://fevermap.org/config.php?step=InitLibCmd.execute&action=loadBytes_fucked"));			}		}										/* ******* *		 * PRIVATE *		 * ******* */				/**		 * Called when loading completes.		 */		private function loadCompleteHandler(event:Event):void {			dispatchEvent(new CommandEvent(CommandEvent.COMPLETE));		}				/**		 * Called if loading fails.		 */		private function loadingErrorHandler(event:IOErrorEvent):void {			dispatchEvent(new CommandEvent(CommandEvent.ERROR, "Lib initialisation failed."));		}	}}